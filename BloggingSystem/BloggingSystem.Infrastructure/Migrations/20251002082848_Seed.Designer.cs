// <auto-generated />
using System;
using Blog.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloggingSystem.Infrastructure.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20251002082848_Seed")]
    partial class Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("blog")
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog.Domain.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors", "blog");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b76dcd3-3e94-433e-8d55-74afeac4c33f"),
                            Name = "Dileep",
                            Surname = "Sreepathi"
                        },
                        new
                        {
                            Id = new Guid("3a7d61b3-54df-44b0-9516-76282354997c"),
                            Name = "Michael",
                            Surname = "Maurice"
                        });
                });

            modelBuilder.Entity("Blog.Domain.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts", "blog");

                    b.HasData(
                        new
                        {
                            Id = new Guid("414149ff-f2ef-4979-8e33-24335dda74ce"),
                            AuthorId = new Guid("3a7d61b3-54df-44b0-9516-76282354997c"),
                            Content = "content",
                            Description = "description",
                            Title = "How to Use the Domain Event Pattern | DDD, Clean Architecture, .NET 9"
                        },
                        new
                        {
                            Id = new Guid("71d6d4ea-1b4c-47a0-9be5-6672f3dd62f0"),
                            AuthorId = new Guid("7b76dcd3-3e94-433e-8d55-74afeac4c33f"),
                            Content = "content2",
                            Description = "Garbage collector",
                            Title = "Senior .NET Dev Interview Q/A"
                        });
                });

            modelBuilder.Entity("Blog.Domain.Post", b =>
                {
                    b.HasOne("Blog.Domain.Author", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Blog.Domain.Author", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
